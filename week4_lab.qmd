---
title: "week4lab"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---
```{r}
# install.packages("geodata")
install.packages("spDataLarge", repos = "https://nowosad.github.io/drat/", type = "source")
library(terra) # raster
library(tidyverse)
library(tmap)
library(kableExtra)
library(spData)
library(spDataLarge)
library(geodata)
```

```{r}
# create raster objects
zion_elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))


zion_land <- rast(system.file("raster/nlcd.tif", package = "spDataLarge"))

# test class of raster object
class(zion_elevation)
```

```{r}
tm_shape(zion_elevation)+
  tm_raster(title = 'Elevation (m)')

tm_shape(zion_land)+
  tm_raster(title = 'Land Cover')
```

```{r}
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))
```

```{r}
tm_shape(landsat3) +
  tm_raster()
```

```{r}
landsat3 <- subset(landsat, 3)
```

```{r}
# Taking the mean of the entire matrix
global(zion_elevation, mean)

# frequency
freq(zion_land)
```

## Indexing 

```{r}
# How to index into a raster, always [row, column]

zion_elevation[1,1] <- 0 # updating the value to 0
zion_elevation[1] # can also use the cell number


landsat[1] <- 0 # multiple layers per cell
```

```{r}
test_raster <- zion_elevation
test_raster[test_raster < 20] <- NA
```

## Spatial Subsetting
```{r}
point <- matrix(c(-113, 37.5), ncol = 2)

# Extract the value
terra::extract(zion_elevation, point)
``````

```{r}
# create a raster with a smaller extent
clip <- rast(xmin = -113.3, xmax = -113, ymin = 37.2, ymax = 37.9,
            resolution = 0.3,
            vals = 1)

# select values that fall within smaller extent
zion_elevation_clip <- zion_elevation[clip, drop = FALSE]

```

```{r}
tm_shape(zion_elevation) +
  tm_raster()

tm_shape(zion_elevation_clip)+
  tm_raster()
```

```{r}
# Creating our mask
rmask <- zion_elevation
rmask[rmask < 2000] <- NA

# bracket subsetting
masked1 <- zion_elevation[rmask, drop = FALSE]

masked2 <- terra::mask(zion_elevation, rmask)
```

```{r}
tm_shape(zion_elevation) +
  tm_raster()
```

```{r}
tm_shape(masked1)+
  tm_raster()
```

## Map Algebra
```{r}
zion_elevation + zion_elevation # doubles each cells' value
zion_elevation^2 # raises each cells' value to the power of 2
log(zion_elevation) # takes the log of each cells' value
zion_elevation > 5 # determines whether each cell has a value greater than 5
```

```{r}
rcl <- matrix(c(1000, 1500, 1,
                1500, 2000, 2,
                2000, 2500, 3,
                2500, 3000, 4),
              ncol = 3, byrow = TRUE)


reclassified <- terra::classify(zion_elevation, rcl = rcl)
values(reclassified) <- as.factor(values(reclassified))
```

```{r}
tm_shape(reclassified)+
  tm_raster()
```

```{r}
#NDVI weee!!!
ndvi_fun <- function(nir, red){
  (nir - red)/(nir + red)
}

ndvi_rast <- terra::lapp(landsat[[c(4,3)]], fun = ndvi_fun)

tm_shape(ndvi_rast) +
  tm_raster()
```

```{r}
# Focal operations
elevation_focal <- focal(zion_elevation,
      w = matrix(1, nrow = 9, ncol = 9),
      fun = min)

# Make a map of it
tm_shape(elevation_focal)+
  tm_raster()
```

```{r}
terra::zonal(zion_elevation, reclassified, fun = "mean") %>%
  kable(col.nammes = c("Elevation zone", "Mean elevation (m)"))%>%
  kable_styling(bootstrap_options = "striped")
```

```{r}
terra::global(zion_elevation, mean)
```

### Changing the extent

```{r}
extend <- terra::extend(zion_elevation, c(1, 200))

zion_elevation + extend # should get error that the extents don't match

extend2 <- terra::extend(zion_elevation, extend)

extend + extend2 # they should match
```


### Origin
```{r}
origin(zion_elevation)
```

### Changing resolution
```{r}
zion_elevation_coarse <- terra::aggregate(zion_elevation,
                                          fact = 5,
                                          fun = mean)

tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original")

tm_shape(zion_elevation_coarse) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "aggregated")

```


```{r}
# Disaggregating

zion_elevation_disagg <- terra::disagg(zion_elevation_coarse,
                                       fact = 5,
                                       method = "bilinear")

if(identical(zion_elevation, zion_elevation_disagg)){
  print("match")
} else{
  warning("no match")
}
``` 

### Resampling
```{r}
target_rast <- rast(xmin = -113.2, xmax = -112.9,
                   ymin = 37.14, ymax = 37.5,
                   nrow = 450, ncol = 460, 
                   crs = crs(zion_elevation))

zion_elevation_resample <- terra::resample(zion_elevation, y = target_rast, method = "bilinear")

tm_shape(zion_elevation_resample) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "resampled")
```

